requests
| where url has_any (
    "/Article",
    "/MySecondPage",
    "/Images"
)
| summarize count() by resultCode
| render piechart

let interval = 30d;
let bucket = (duration:real) {   // function
    case(duration < 1000, "1 (<1s)",
         duration < 2000, "2 (<2s)",
         duration < 3000, "3 (<3s)",
                          "4 (>=3s)")
};
requests
| where url has_any (
    "/Article",
    "/MySecondPage",
    "/Images"
)
| extend durationBucket = bucket(toreal(duration))   // duration = column in requests table   
| summarize count() by durationBucket, bin(timestamp, interval)
| sort by durationBucket asc
| render barchart kind=stacked100

// OR using performanceBucket column

let interval = 30d;
requests
| where url has_any (
    "/Article",
    "/MySecondPage",
    "/Images"
)     
| summarize count() by performanceBucket, bin(timestamp, interval)
| sort by performanceBucket asc
| render barchart kind=stacked100

StorageBlobLogs
| where TimeGenerated >startofday(datetime('2023-09-01')) and TimeGenerated <startofday(datetime('2023-10-01'))
| where OperationName has "Copyblob" and Uri has "/success"
| extend fileName = extract("(/mycontainer/success/)(\\d{4}_\\d{2}_\\d{2}/)(.*.json)", 3, ObjectKey)
| project TimeGenerated, fileName
| sort by TimeGenerated desc

StorageBlobLogs
| where OperationName == "PutBlob"
| extend operation = extract("(/mycontainer/import/)(\\d{4}_\\d{2}_\\d{2}/)([a-zA-z]+)(_i_)(.*.json)", 3, ObjectKey)
| summarize sizeBytes=sum(RequestBodySize) by  operation
| project operation, sizeBytes
| join (
    StorageBlobLogs
    | where OperationName == "PutBlob"
    | extend operation = extract("(/mycontainer/import/)(\\d{4}_\\d{2}_\\d{2}/)([a-zA-z]+)(_i_)(.*.json)", 3, ObjectKey)
    | summarize numberOfFiles=count() by  operation
    | project operation, numberOfFiles
) on operation
| project-away operation1
| project operation, numberOfFiles, sizeBytes
| sort by numberOfFiles